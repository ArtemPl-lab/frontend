{"ast":null,"code":"import { useState, useCallback } from 'react';\nexport const useAPI = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      headers['Content-Type'] = 'application/json';\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      return null;\n    }\n  }, []);\n  return {\n    loading,\n    error,\n    request\n  };\n};","map":{"version":3,"sources":["C:/Users/User/OneDrive/Рабочий стол/learning/vseotzivu/frontend/src/hooks/api.hook.js"],"names":["useState","useCallback","useAPI","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","data","json","e","message"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAQO,GAAR,EAAaC,MAAM,GAAG,KAAtB,EAA6BC,IAAI,GAAG,IAApC,EAA0CC,OAAO,GAAG,EAApD,KAA2D;AACnFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAG;AACCO,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA;AAH8B,OAAN,CAA5B;AAKA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOU,IAAP;AACH,KAVD,CAUE,OAAME,CAAN,EAAQ;AACNZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACU,CAAC,CAACC,OAAH,CAAR;AACA,aAAO,IAAP;AACH;AACJ,GAjB0B,EAiBxB,EAjBwB,CAA3B;AAkBA,SAAO;AAAEd,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CAvBM","sourcesContent":["import {useState, useCallback} from 'react';\r\n\r\nexport const useAPI = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async ( url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true);\r\n        try{\r\n            headers['Content-Type'] = 'application/json';\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers\r\n            });\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            return null;\r\n        }\r\n    }, []);\r\n    return { loading, error, request };\r\n}"]},"metadata":{},"sourceType":"module"}